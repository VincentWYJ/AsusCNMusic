package com.asus.cnmusic.src_gen.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.asus.cnmusic.src_gen.HistoryMusicNote;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HISTORY_MUSIC_NOTE".
*/
public class HistoryMusicNoteDao extends AbstractDao<HistoryMusicNote, Long> {

    public static final String TABLENAME = "HISTORY_MUSIC_NOTE";

    /**
     * Properties of entity HistoryMusicNote.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Album = new Property(2, String.class, "album", false, "ALBUM");
        public final static Property Artist = new Property(3, String.class, "artist", false, "ARTIST");
        public final static Property Duration = new Property(4, Integer.class, "duration", false, "DURATION");
        public final static Property Path = new Property(5, String.class, "path", false, "PATH");
        public final static Property Count = new Property(6, Integer.class, "count", false, "COUNT");
    };

    private DaoSession daoSession;


    public HistoryMusicNoteDao(DaoConfig config) {
        super(config);
    }
    
    public HistoryMusicNoteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HISTORY_MUSIC_NOTE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT NOT NULL ," + // 1: title
                "\"ALBUM\" TEXT," + // 2: album
                "\"ARTIST\" TEXT," + // 3: artist
                "\"DURATION\" INTEGER," + // 4: duration
                "\"PATH\" TEXT," + // 5: path
                "\"COUNT\" INTEGER);"); // 6: count
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HISTORY_MUSIC_NOTE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HistoryMusicNote entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if(id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTitle());
 
        String album = entity.getAlbum();
        if(album != null) {
            stmt.bindString(3, album);
        }
 
        String artist = entity.getArtist();
        if(artist != null) {
            stmt.bindString(4, artist);
        }
 
        Integer duration = entity.getDuration();
        if(duration != null) {
            stmt.bindLong(5, duration);
        }
 
        String path = entity.getPath();
        if(path != null) {
            stmt.bindString(6, path);
        }
 
        Integer count = entity.getCount();
        if(count != null) {
            stmt.bindLong(7, count);
        }
    }

    @Override
    protected void attachEntity(HistoryMusicNote entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public HistoryMusicNote readEntity(Cursor cursor, int offset) {
        HistoryMusicNote entity = new HistoryMusicNote( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // album
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // artist
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // duration
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // path
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // count
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HistoryMusicNote entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.getString(offset + 1));
        entity.setAlbum(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setArtist(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDuration(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setPath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCount(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(HistoryMusicNote entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(HistoryMusicNote entity) {
        if(entity != null) {
            return entity.getId();
        }else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
